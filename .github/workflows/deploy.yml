# .github/workflows/deploy.yml
name: Deploy to Cloud Run

on:
  push:
    branches:
      - master # Kodu 'master' branch'ine her push yaptığınızda çalışır

# WIF (Workload Identity Federation) izinleri
permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: personal-ai-journal  # Proje ID'si
  SERVICE_ID: personal-ai-journal
  # Lütfen buraya Firestore'u kurarken seçtiğiniz bölgeyi yazın (Örn: europe-west3)
  REGION: <KENDİ-BÖLGENİZ>             

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # 1. Google Cloud'a Kimlik Doğrulama
    # WIF bloğu doğru GCP bilgileri ile güncellendi.
    - name: Authenticate Google Cloud
      uses: google-github-actions/auth@v2
      with:
        # PROJE NUMARASI
        workload_identity_provider: projects/621077294251/locations/global/workloadIdentityPools/github-ci-cd-pool/providers/github-provider
        
        # HİZMET HESABI E-POSTASI
        service_account: personal-ai-journal-svc@personal-ai-journal.iam.gserviceaccount.com

    # 2. Docker İmajını Oluşturma ve Artifact Registry'ye Gönderme
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use Artifact Registry
      run: gcloud auth configure-docker ${REGION}-docker.pkg.dev

    - name: Build and Push Docker Image
      run: |
        gcloud auth configure-docker
        IMAGE_NAME=${REGION}-docker.pkg.dev/${PROJECT_ID}/${SERVICE_ID}/${SERVICE_ID}:${{ github.sha }}
        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    # 3. Cloud Run'a Dağıtım
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE_ID }}
        region: ${{ env.REGION }}
        image: ${{ env.IMAGE_NAME }}
        
        # DÜZELTİLMİŞ KISIM
        flags: '--allow-unauthenticated --port 8080'